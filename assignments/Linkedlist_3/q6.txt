
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = NULL;
        ListNode* current = head;
        ListNode* Next = NULL;
        while (current) {
            Next = current->next;
            current->next = prev;
            prev = current;
            current = Next;
        }
        return prev;
    }

    int pairSum(ListNode* head) {
        if (!head || !head->next) return 0; 
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* secondHalf = reverseList(slow);
        ListNode* firstHalf = head;
        int maxSum = 0;
        while (secondHalf) {
            maxSum = max(maxSum, firstHalf->val + secondHalf->val);
            firstHalf = firstHalf->next;
            secondHalf = secondHalf->next;
        }

        return maxSum;
    }
};
